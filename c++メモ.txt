・二分探索(lower_bound())
vector<int> v = {10,20,30,40,50};
int target = 21;
auto it = lower_bound(v.begin(),v.end(),target);
v.insert(it,target);
->{10,20,21,30,40,50}
lower_boundでtargetを指定してイテレータを取得
v.insert(it,target)でv[it]にtargetを挿入する
itで取得したイテレータのインデックス番号を取得するには
it-v.begin()で取得(0-indexeed)

・pythonのdefaultdictをc++で実装するには
defaultdict(int) -> std::map<int,int>
defaultdict(list)-> std::map<int,vector<int> >

・c++のsetは自動（二分探索）でソートされる

・pythonのsum()はc++ではstd::accumulate(a.begin(),a.end(),0))になる

・sort()で降順にする方法はsort(a.begin(),a.end(),greater<int>());

・while(true)をforで実現する方法　
for(int i = 0; ; ++i){}でできる。
・bit全探索のやり方
vector<int> ele = {1,2,3,4,5};
int N = ele.size();
for(int bit = 0; bit < (1<<N); ++bit){
  vector<int> subset;
  for(int i = 0; i < N; ++i){
    if(bit & (1<<i))subset.push_back(ele[i]);
    }
}

・複数の値に対してgcd,lcmを出力する方法
// 最大公約数 (GCD) を求める
intresult_gcd=std::accumulate(numbers.begin(),numbers.end(),numbers[0],std::gcd<int>);

// 最小公倍数 (LCM) を求める
int result_lcm = std::accumulate(numbers.begin(), numbers.end(),1,std::lcm<int>);
