・二分探索(lower_bound())
vector<int> v = {10,20,30,40,50};
int target = 21;
auto it = lower_bound(v.begin(),v.end(),target);
v.insert(it,target);
->{10,20,21,30,40,50}
lower_boundでtargetを指定してイテレータを取得
v.insert(it,target)でv[it]にtargetを挿入する
itで取得したイテレータのインデックス番号を取得するには
it-v.begin()で取得(0-indexeed)

・pythonのdefaultdictをc++で実装するには
defaultdict(int) -> std::map<int,int>
defaultdict(list)-> std::map<int,vector<int> >

・c++のsetは自動（二分探索）でソートされる

・pythonのsum()はc++ではstd::accumulate(a.begin(),a.end(),0))になる

・sort()で降順にする方法はsort(a.begin(),a.end(),greater<int>());

・while(true)をforで実現する方法　
for(int i = 0; ; ++i){}でできる。
・bit全探索のやり方
vector<int> ele = {1,2,3,4,5};
int N = ele.size();
for(int bit = 0; bit < (1<<N); ++bit){
  vector<int> subset;
  for(int i = 0; i < N; ++i){
    if(bit & (1<<i))subset.push_back(ele[i]);
    }
}

・複数の値に対してgcd,lcmを出力する方法

  // リスト全体の最大公約数を求める
  std::vector<int> v = {12, 42, 72};
  int r = std::accumulate(v.begin(), v.end(), 0, [](int m, int n) {
    return std::gcd(m, n);});
 (gcdをlcm)
 
・map<int,int>などのキーに対して降順にする方法
mapは自動的にキーに対して昇順になるので
map<int, int, std::greater<int>> my_map;とすると降順になる

  std::vector<int> v = {12, 42, 72};
  std::vector<int> v = {12, 42, 72};
・vector<vector<int> > vはv[0][0]ができる
・vector<pair<int,int> > vはv[0].first,v[0].secondでできる

・vector<pair<int,int> > について値についてソートする方法
sort(v.begin(), v.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
return a.second < b.second;});

・小数点を扱うときは
cout << fixed << setprecision(8) << ans << endl;
とするといい

・vector<vector<ll> > dpはをresize()する方法
今回は2行3列にする方法
vector<vector<ll> > dp;
dp.resize(2);
for(ll i = 0; i < 2; ++i) dp[i].resize(3);
